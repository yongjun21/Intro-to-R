library(ggplot2)
library(ggplot2)
?geom_abline
gg + geom_point() + geom_abline(intercept=fit$coefficients[0], slope=fit$coefficients[1])
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg, color=cyl))
gg + geom_point() + geom_abline(intercept=fit$coefficients[0], slope=fit$coefficients[1])
mtcars$cyl <- as.factor(mtcars$cyl)
gg + geom_point() + geom_abline(intercept=fit$coefficients[0], slope=fit$coefficients[1])
mtcars$cyl <- as.factor(mtcars$cyl)
gg + geom_point() + geom_abline(intercept=fit$coefficients[0], slope=fit$coefficients[1])
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg, color=cyl))
gg + geom_point() + geom_abline(intercept=fit$coefficients[0], slope=fit$coefficients[1])
gg + geom_point() + geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
mtcars$am <- as.factor(mtcars$am)
levels(am)
levels(mtcars$am)
?mtcars
mtcars$am
levels(mtcars$am) <- c('auto', 'manual')
levels(mtcars$am) <- c('auto', 'manual')
mtcars$am
?lm
?geom_line
gg + geom_point() + geom_line(aes(x=hp, y=predicted_mpg))
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c('Auto', 'Manual')
fit <- lm(mpg~hp+am, data=mtcars)
summary(fit)
predicted_mpg <- predict(fit, mtcars)
gg + geom_point() + geom_line(aes(x=hp, y=predicted_mpg))
gg + geom_point(aes(color=cyl)) + geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
+ geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
gg + geom_point(aes(color=cyl))
+ geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
gg + geom_point(aes(color=cyl)) +
geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
gg + geom_point(aes(color=cyl))  +
geom_line(aes(y=predicted_mpg))
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg))
gg + geom_point()
library(ggplot2)
mtcars$cyl <- as.factor(mtcars$cyl)
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg))
gg + geom_point(aes(color=cyl))
gg + geom_point(aes(color=cyl)) +
geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
gg + geom_point(aes(color=cyl))  +
geom_line(aes(y=predicted_mpg))
gg + geom_point(aes(color=cyl))  +
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(color=cyl))  +
geom_line(aes(y=predicted_mpg, color=am))
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(color=cyl))  +
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(color=cyl, shape=am))  +
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(color=cyl, shape=am, size=3))  +
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(shape=cyl, color=am))  +
geom_line(aes(y=predicted_mpg, group=am))
gg + geom_point(aes(shape=cyl, color=am))  +
geom_line(aes(y=predicted_mpg, color=am))
gg + geom_point(aes(size=cyl, color=am))  +
geom_line(aes(y=predicted_mpg, color=am))
geom_line(aes(y=predicted_mpg, color=am))
gg + geom_point(aes(color=am))  +
geom_line(aes(y=predicted_mpg, color=am))
typeof(mtcars$am)
iris
str(iris)
summary(iris)
boxplot(Sepal.Length~as.character(Species), iris)
?reorder
?reorder
mon <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')
mon <- factor(mon, levels=mon)
mon
orderedMonth <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')
unorderedMonth <- c('May', 'Mar', 'Jan', 'Apr', 'Feb', 'Jun')
factor(unorderedMonth, levels=orderedMonth)
orderedMonth <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')
unorderedMonth <- c('May', 'Mar', 'Jan', 'Apr', 'Feb', 'Jun')
mon <- factor(unorderedMonth, levels=orderedMonth)
mon
str(mon)
mon[1] > mon[2]
orderedMonth <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')
unorderedMonth <- c('May', 'Mar', 'Jan', 'Apr', 'Feb', 'Jun')
mon <- factor(unorderedMonth, levels=orderedMonth, ordered=TRUE)
str(mon)
mon[1] > mon[2]
mon
mon[1] > mon[2]
mon[5] > mon[6]
boxplot(Sepal.Length~Species, iris, color=c('red', 'blue', 'green'))
boxplot(Sepal.Length~Species, iris, colour=c('red', 'blue', 'green'))
?boxplot
boxplot(Sepal.Length~Species, iris, col=c('red', 'blue', 'green'))
boxplot(Sepal.Length~Species, iris, col=c('red', 'orange', 'yellow'))
boxplot(Sepal.Length~Species, iris, col=c('orange', 'red', 'yellow'))
red
boxplot(Sepal.Length~Species, iris, col=c('red', 'orange', 'yellow'))
boxplot(Sepal.Length~Species, iris, col=c('dark red', 'orange', 'yellow'))
boxplot(Sepal.Length~Species, iris, col=c('dark red', 'dark orange', 'dark yellow'))
boxplot(Sepal.Length~Species, iris, col=c('dark red', 'dark orange', 'yellow'))
boxplot(Sepal.Length~Species, iris, col=c('red', 'dark orange', 'yellow'))
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Length, color=Species))
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
?kmeans
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=Species)) + geom_point()
?nnormalize
?normalize
as.matrix(iris[,c('Sepal.Length', 'Petal.Width')])
scale(as.matrix(iris[,c('Sepal.Length', 'Petal.Width')]))
scaled_data <- scale(as.matrix(iris[,-5]))
?km
?kmeans
?scale
km <- kmeans(scaled_data, 3)
?kmeans
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=km$cluster, shape=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=as.factor(km$cluster), shape=Species)) + geom_point()
gplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) + geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) +
geom_point()
cluster <- as.factor(km$cluster)
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) +
geom_point()
?ggplot
?aes
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, pch=Species)) +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) +
geom_point(size=2)
ggplot(data=iris, aes(x=Sepal.Length, y=Petal.Width, color=cluster, shape=Species)) +
geom_point(size=3)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=3)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=4)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species, fill=Species)) +
geom_point(size=4)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=4, fill=NA)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=4, fill='white')
geom_point(size=3)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=3)
geom_point(size=5)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5)
install.packages("ProgGUIinR")
library(ProgGUIinR)
LoremIpsum
install.packages("zipfR")
library(zipfR)
Brown()
Brown
data("Brown.tfl")
View(Brown.tfl)
?order
library(zipfR)
data("Brown.tfl")
Brown_subset <- Brown.tf1[order(Brown.tf1$f),][1:500,]
Brown_subset <- Brown.tfl[order(Brown.tf1$f),][1:500,]
library(zipfR)
data("Brown.tfl")
Brown_subset <- Brown.tfl[order(Brown.tf1$f),][1:500,]
library(zipfR)
data("Brown.tfl")
Brown_subset <- Brown.tfl[order(Brown.tfl$f),][1:500,]
View(Brown_subset)
Brown_subset <- Brown.tfl[order(Brown.tfl$f, decreasing=TRUE),][1:500,]
View(Brown_subset)
?wordcloud
install.packages("wordcloud")
library(wordcloud)
install.packages("wordcloud")
?wordcloud
wordcloud(Brown_subset$type, Brown_subset$f)
wordcloud(Brown_subset$type, Brown_subset$f,random.order=FALSE)
Brown_subset <- Brown.tfl[order(Brown.tfl$f, decreasing=TRUE),][1:300,]
wordcloud(Brown_subset$type, Brown_subset$f,random.order=FALSE)
?brewer.pal
wordcloud(Brown_subset$type,
Brown_subset$f,
scale=c(10,1),
color=brewer.pal(8,'Dark2'),
random.order=FALSE,
random.color=TRUE,
rot.per=.3)
wordcloud(Brown_subset$type,
Brown_subset$f,
scale=c(5,1),
color=brewer.pal(8,'Dark2'),
random.order=FALSE,
random.color=TRUE,
rot.per=.3)
Brown_subset <- Brown.tfl[order(Brown.tfl$f, decreasing=TRUE),][1:200,]
wordcloud(Brown_subset$type,
Brown_subset$f,
scale=c(7,1),
color=brewer.pal(8,'Dark2'),
random.order=FALSE,
random.color=TRUE,
rot.per=.3)
Brown_subset <- Brown.tfl[order(Brown.tfl$f, decreasing=TRUE),][1:150,]
wordcloud(Brown_subset$type,
Brown_subset$f,
scale=c(7,1),
color=brewer.pal(8,'Dark2'),
random.order=FALSE,
random.color=TRUE,
rot.per=.3)
data("housing")
housing
data("crabs")
crabs
?rpart
install.packages("rpart")
?rpart
?cart
library(rpart)
?rpart
str(crabs)
library(rpart)
data("crabs")
head(crabs)
str(crab)
fit <- rpart(sp~sex+FL+RW+CL+CW+BD, data=crabs)
plot(fit)
text(fit, use.n = TRUE)
data("swiss")
swiss
data("infert")
infert
?infert
ggplot(data=infert,aes(x=age, y=case)) + geom_points() + facet_grid(.~education)
ggplot(data=infert,aes(x=age, y=case)) + geom_point() + facet_grid(.~education)
ggplot(data=infert,aes(x=age, y=case)) + geom_point()
detach("package:ProgGUIinR", unload=TRUE)
detach("package:zipfR", unload=TRUE)
data("SOTU")
SOTU
data("quine")
quine
?quine
install.packages("rattle")
library(rpart)
library(rattle)
data("crabs")
head(crabs)
str(crab)
fit <- rpart(sp~sex+FL+RW+CL+CW+BD, data=crabs)
fancyRpartPlot(fit)
library(rattle)
install.packages("rattle")
install.packages("RGtk2")
library(manipulate)
scaled_data <- scale(as.matrix(iris[,-5]))
km <- kmeans(scaled_data, 3)
cluster <- as.factor(km$cluster)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5)
?"manipulate"
?subset
manipulate(ggplot(data=subset(iris, Species==x), aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5), x=picker(levels(iris$Species)))
iris
subset(iris, Species=='virginica')
?picker
library(manipulate)
manipulate(ggplot(data=subset(iris, Species==x), aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5), x=picker(as.list(levels(iris$Species))))
manipulate(ggplot(data=subset(iris, Species==pick), aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5), pick=picker(levels(iris$Species)))
manipulate(ggplot(data=subset(iris, Species==pick), aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5), pick=picker(as.list(levels(iris$Species))))
manipulate(ggplot(data=iris[iris$Species==pick,], aes(x=Sepal.Length, y=Sepal.Width, color=cluster[iris$Species==pick], shape=Species)) +
geom_point(size=5), pick=picker(as.list(levels(iris$Species))))
manipulate(ggplot(data=iris[iris$Species==pick,], aes(x=Sepal.Length, y=Sepal.Width, color=cluster[iris$Species==pick], shape=Species)) +
geom_point(size=5), pick=picker(as.list(levels(iris$Species))))
scaled_data <- scale(as.matrix(iris[,-5]))
km <- kmeans(scaled_data, 3)
iris$cluster <- as.factor(km$cluster)
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5)
manipulate(ggplot(data=iris[iris$Species==pick,], aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5), pick=picker(as.list(levels(iris$Species))))
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=cluster, shape=Species)) +
geom_point(size=5)
install.packages("rattle")
library(rpart)
library(rattle)
data("crabs")
head(crabs)
str(crabs)
fit <- rpart(sp~sex+FL+RW+CL+CW+BD, data=crabs)
fancyRpartPlot(fit)
install.packages("rpart.plot")
fancyRpartPlot(fit)
help(crabs)
data("crabs")
head(crabs)
str(crabs)
library(rpart)
library(rattle)
data("crabs")
head(crabs)
str(crabs)
fit <- rpart(sp~sex+FL+RW+CL+CW+BD, data=crabs)
fancyRpartPlot(fit)
crabs
library(rattle)
detach("package:datasets", unload=TRUE)
library("datasets", lib.loc="/usr/lib/R/library")
install.packages(c("curl", "git2r", "Rcpp", "rstudioapi"))
library(rpart)
library(rattle)
data("crabs")
data("wine")
wine
data("UCBAdmissions")
UCBAdmissionss
UCBAdmissions
data("occupationalStatus")
occupationalStatus
data("swiss")
swiss
hist(swiss$Infant.Mortality)
swiss$Infant.Mortality <- ifelse(swiss$Infant.Mortality > 20, '> 20', '<= 20')
swiss$Infant.Mortality <- as.factor(swiss$Infant.Mortality)
swiss$Infant.Mortality
fit <- rpart(Infant.Mortality~., data=swiss)
fancyRpartPlot(fit)
head(swiss)
str(swiss)
data("swiss")
head(swiss)
str(swiss)
summary(swiss)
?swiss
a <- 1:5
a
b <- 6:10
a+b
arr <- 1:10
arr[7]
arr[1:4]
arr[c(1, 3, 5)]
a <- 1:5
a %% 2 == 0
a <- 1:3
a
b <- 4:6
a %*% b
a * b
arr <- c(1, 'a', TRUE)
arr
class(arr)
scalar <- 9
scalar
scalar[1]
a <- 1:10
b <- 1:2
a
b
rbind(a, b, sum=a+b)
a
str <- c('a','b','c','d','e')
str
num <- c(3,4,1,2,5)
num
str[num]
a <- 1:10
a
f <- function (n) {
n * 2
}
f(a)
sum(a)
mean(a)
min(a)
max(a)
cumsum(a)
a
cumsum(a)
a <- 1:5
b <- c('a', 'b', 'c', 'd', 'e')
tb <- cbind(a, b)
tb
class(tb)
typeof(tb)
tb <- list(a=a, b=b)
tb
x <- 1:2
print(try(tb <- data.frame(a, b, x)))
typeof(mtcars)
class(mtcars)
mtcars[mtcars$mpg > 25, ]
mtcars
mtcars[mtcars$mpg > 25, ]
mtcars[mtcars$mpg > 25, 1:3]
mtcars[mtcars$mpg > 25, -(1:3)]
mtcars[mtcars$mpg > 25, c('mpg', 'hp', 'wt')]
library(ggplot2)
mtcars$cyl <- as.factor(mtcars$cyl)
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg))
gg + geom_point(aes(color=cyl))
data=mtcars,
gg <- ggplot(data=mtcars, aes(x=hp, y=mpg))
gg + geom_point(aes(color=cyl))
fit <- lm(mpg~hp, data=mtcars)
summary(fit)
gg + geom_point(aes(color=cyl)) +
geom_abline(intercept=fit$coefficients[1], slope=fit$coefficients[2])
test <- data.frame(hp=c(100, 200, 300))
predicted_mpg <- predict(fit, test)
cbind(test, predicted_mpg)
?predict
?mtcars
?predict
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c('Auto', 'Manual')
fit <- lm(mpg~hp+am, data=mtcars)
summary(fit)
predicted_mpg <- predict(fit, mtcars)
ggplot(data=mtcars, aes(x=hp, y=mpg, color=am)) + geom_point()  +
geom_line(aes(y=predicted_mpg))
data(iris)
head(iris)
summary(iris)
str(iris)
orderedMonth <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')
unorderedMonth <- c('May', 'Mar', 'Jan', 'Apr', 'Feb', 'Jun')
library(wordcloud)
library(zipfR)
data("Brown.tfl")
Brown_subset <- Brown.tfl[order(Brown.tfl$f, decreasing=TRUE),][1:150,]
Brown_subset
library(rpart)
library(rattle)
data("swiss")
head(swiss)
summary(swiss)
?swiss
fit <- rpart(Infant.Mortality~., data=swiss)
fancyRpartPlot(fit)
pred <- predict(fit, swiss, type='class')
rbind(swiss$Infant.Mortality, pred)
head(swiss)
summary(swiss)
swiss$Infant.Mortality <- ifelse(swiss$Infant.Mortality > 20, '> 20', '<= 20')
swiss$Infant.Mortality <- as.factor(swiss$Infant.Mortality)
fit <- rpart(Infant.Mortality~., data=swiss)
fancyRpartPlot(fit)
pred <- predict(fit, swiss, type='class')
rbind(swiss$Infant.Mortality, pred)
rbind(Actual=swiss$Infant.Mortality, Prediction=pred)
library(reshape2)
GDP <- read.csv('GDP.csv')
Population <- read.csv('Population.csv')
GDP <- melt(GDP, id.vars='Year', variable.name='Country', value.name='GDP')
Population <- melt(Population, id.vars='Year', variable.name='Country', value.name='Population')
combined <- data.frame(Population, GDP)
combined$GDP <- combined$GDP * 1000000
combined$Population <- combined$Population * 1000
combined$Per_Capita <- combined$GDP / combined$Population
combined <- combined[!(combined$Country %in% c('Kuwait','UAE','Qatar')),]
gg <- function(year) {
qplot(x=Per_Capita, y=GDP, size=log(Population,10), label=Country, data=combined[combined$Year==year,], log='y') + geom_text(hjust=-.5, size=3)
}
gg(1970)
GDP <- melt(GDP, id.vars='Year', variable.name='Country', value.name='GDP')
Population <- melt(Population, id.vars='Year', variable.name='Country', value.name='Population')
combined <- data.frame(Population, GDP)
combined$GDP <- combined$GDP * 1000000
combined$Population <- combined$Population * 1000
combined$Per_Capita <- combined$GDP / combined$Population
combined <- combined[!(combined$Country %in% c('Kuwait','UAE','Qatar')),]
getwd
getwd()
setwd(/home/yongjun21/Github/Sharings-and-Teachings/Into to R)
setwd('/home/yongjun21/Github/Sharings-and-Teachings/Into to R')
setwd('/home/yongjun21/Github/Sharings-and-Teachings/Intro to R')
setwd('/home/yongjun21/GitHub/Sharings-and-Teachings/Intro to R')
library(reshape2)
GDP <- read.csv('GDP.csv')
Population <- read.csv('Population.csv')
GDP <- melt(GDP, id.vars='Year', variable.name='Country', value.name='GDP')
Population <- melt(Population, id.vars='Year', variable.name='Country', value.name='Population')
combined <- data.frame(Population, GDP)
combined$GDP <- combined$GDP * 1000000
combined$Population <- combined$Population * 1000
combined$Per_Capita <- combined$GDP / combined$Population
combined <- combined[!(combined$Country %in% c('Kuwait','UAE','Qatar')),]
gg <- function(year) {
qplot(x=Per_Capita, y=GDP, size=log(Population,10), label=Country, data=combined[combined$Year==year,], log='y') + geom_text(hjust=-.5, size=3)
}
gg(1970)
library(manipulate)
manipulate(gg(year), year=slider(min=1970, max=2008, step=2))
